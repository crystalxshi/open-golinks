extends layout

block content
  script.
      (function (w, d, s, g, js, fs) {
          g = w.gapi || (w.gapi = {});
          g.analytics = {
              q: [], ready: function (f) {
                  this.q.push(f);
              }
          };
          js = d.createElement(s);
          fs = d.getElementsByTagName(s)[0];
          js.src = 'https://apis.google.com/js/platform.js';
          fs.parentNode.insertBefore(js, fs);
          js.onload = function () {
              g.load('analytics');
          };
      }(window, document, 'script'));

  .input-group.mb-3
    .btn-group.mr-2(role='group', aria-label='First group')
      button.btn.btn-secondary.dash-duration(type='button', data-value=-1) 全部
      button.btn.btn-secondary.dash-duration(type='button', data-value=180) 180天
      button.btn.btn-secondary.dash-duration(type='button', data-value=90) 90天
      button.btn.btn-secondary.dash-duration(type='button', data-value=30) 30天
      button.btn.btn-secondary.active.dash-duration(type='button', data-value=14) 14天
      button.btn.btn-secondary.dash-duration(type='button', data-value=1) 1天
    input.form-control#regex-input(type='text', placeholder="RegEx", aria-label="Regular Expression for Search", aria-describedby='button-addon2')
    .input-group-append
      button#btn-update.btn.btn-secondary(type='button') 刷新 <i class="fas fa-sync-alt"></i>

  div#pie-chart-container
  div#line-chart-container
  div#table-chart-container
  script(src='https://cdnjs.cloudflare.com/ajax/libs/date-fns/1.30.1/date_fns.min.js', crossorigin='anonymous')
  script.

      gapi.analytics.ready(function () {
          var tableChart, pieChart, lineChart;

          var charts;
          var lockedUrl = '#{lockedUrl}';
          if (lockedUrl) {
              $(`#regex-input`)
                  .val(`#{lockedUrl}`)
                  .prop('disabled', true);
          }

          function refreshQuery() {
              let dateRangeBtn = $('.active.dash-duration');
              let lastNDay = parseInt(dateRangeBtn.attr('data-value'));
              var endDate = new Date(); // today
              var startDate;
              if (parseInt(lastNDay) === -1) {
                  console.log(`Setting startDate`, `2018-08-01`);
                  startDate = new Date(2018, 8, 1, 0, 0, 0);
              } else {
                  console.log(`Setting startDate`, `today - lastNdate`);
                  startDate = dateFns.subDays(endDate, lastNDay);
              }

              var dateRange = {
                  'start-date': dateFns.format(startDate, `GGGG-MM-DD`),
                  'end-date': dateFns.format(endDate, `GGGG-MM-DD`),
              };

              let dimensions = 'ga:dateHour';
              if (lastNDay === -1) {
                  dimensions = 'ga:isoYearIsoWeek';
              } else if (lastNDay <= 1) {
                  dimensions = 'ga:dateHour';
              } else if (lastNDay <= 7) {
                  dimensions = 'ga:date';
              } else if (lastNDay <= 180) {
                  dimensions = 'ga:date';
              } else {
                  dimensions = 'ga:isoYearIsoWeek';
              }

              lineChart.set({query: {'dimensions': dimensions}});
              charts.forEach(function (chart) {
                  chart.set({query: dateRange});
              });

              var reg = $(`#regex-input`).val();

              if (lockedUrl) {
                  charts.forEach(function (chart) {
                      chart.set({query: {filters: `ga:pagePathLevel1=~^/${lockedUrl}$`}});
                  });
              } else if (reg) {
                  charts.forEach(function (chart) {
                      chart.set({query: {filters: `ga:pagePathLevel1=~${reg}`}});
                  });
              } else {
                  charts.forEach(function (chart) {
                      chart.set({query: {filters: 'ga:pagePathLevel1!=/'}});
                  });
              }
              charts.forEach(function (chart) {
                  chart.execute();
              });
          };

          $(`.dash-duration`).click(function () {
              $(`.active`).removeClass(`active`);
              $(this).addClass(`active`);
              refreshQuery();
          });
          $(`#btn-update`).click(function () {
              refreshQuery();
          });
          const viewId = '#{viewId}';
          /**
           * Authorize the user immediately if the user has already granted access.
           * If no access has been created, render an authorize button inside the
           * element with the ID "embed-api-auth-container".
           */
          gapi.analytics.auth.authorize({
              container: 'embed-api-auth-container',
              serverAuth: {
                  access_token: '#{accessToken}'
              }
          });


          /**
           * Create a new DataChart instance with the given query parameters
           * and Google chart options. It will be rendered inside an element
           * with the id "chart-container".
           */
          pieChart = new gapi.analytics.googleCharts.DataChart({
              query: {
                  'ids': viewId,
                  'metrics': 'ga:pageviews',
                  'dimensions': 'ga:pagePathLevel1',
                  'sort': '-ga:pageviews',
                  'filters': 'ga:pagePathLevel1!=/',
                  'max-results': 7
              },
              chart: {
                  'container': 'pie-chart-container',
                  'type': 'PIE',
                  'options': {
                      'width': '100%',
                      'pieHole': 4 / 9,
                  }
              }
          });

          /**
           * Create a table chart showing top browsers for users to interact with.
           * Clicking on a row in the table will update a second timeline chart with
           * data from the selected browser.
           */
          tableChart = new gapi.analytics.googleCharts.DataChart({
              query: {
                  'ids': viewId, // <-- Replace with the ids value for your view.
                  'dimensions': 'ga:pagePathLevel1',
                  'metrics': 'ga:sessions,ga:pageviews,ga:users',
                  'sort': '-ga:sessions',
                  'filters': `ga:pagePathLevel1!=/`,
                  'max-results': '30'
              },
              chart: {
                  type: 'TABLE',
                  container: 'table-chart-container',
                  options: {
                      width: '100%'
                  }
              }
          });


          lineChart = new gapi.analytics.googleCharts.DataChart({
              query: {
                  'ids': viewId, // <-- Replace with the ids value for your view.
                  'metrics': 'ga:sessions,ga:pageviews,ga:users',
                  'dimensions': 'ga:isoYearIsoWeek',
                  'filters': `ga:pagePathLevel1!=/`,
              },
              chart: {
                  type: 'LINE',
                  container: 'line-chart-container',
                  options: {
                      width: '100%'
                  }
              }
          });

          charts = [tableChart, pieChart, lineChart];
          refreshQuery();
      });
